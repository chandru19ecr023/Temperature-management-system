#include <Wire.h> 
#include <LiquidCrystal_I2C.h> 
LiquidCrystal_I2C lcd(0x27,16,2); 
#include <SoftwareSerial.h> 
SoftwareSerial espSerial(3,2);  
String mySSID = "iot123456"; // WiFi SSID 
String myPWD = "iot123456"; // WiFi Password 
String myAPI = "IL9YWNLC3EQ9808J"; // API Key 
String myHOST = "api.thingspeak.com"; 
String myPORT = "80"; 
#define DEBUG true 
String myFIELD_1= "field1";  
float Vin_1 = 0.0; 
float R1 = 30000.0;  
float R2 = 7500.0;  
int value_1 = 0; 
float celsius,fahrenheit,millivolts; 
int rawvoltage,outputpin=A0; 
#define BUZZER 6  
#define FAN 7 
#define RELAY 5 
void setup() { 
Serial.begin(9600); 
pinMode(A0, INPUT); 
pinMode(BUZZER,OUTPUT); 
pinMode(FAN,OUTPUT); 
pinMode(RELAY,OUTPUT);
 
lcd.init(); // initialize the lcd  
lcd.init(); 
lcd.backlight(); 
lcd.setCursor(0,0); 
lcd.print("BAT..MANANGMENT"); 
lcd.setCursor(6,1); 
lcd.print("SYSTEM ");  
espSerial.begin(115200); 
espData("AT+RST", 1000, DEBUG); //Reset the ESP8266 module 
espData("AT+CWMODE=1", 1000, DEBUG); //Set the ESP mode as station  mode 
espData("AT+CWJAP=\""+ mySSID +"\",\""+ myPWD +"\"", 1000, DEBUG);//Connect to WiFi network  
delay(3000); 
lcd.clear(); 
} 
void loop() { 
lcd.clear(); 
Temp(); 
VoltageSensor_1(); 
digitalWrite(BUZZER,LOW); 
digitalWrite(RELAY,HIGH); 
delay(100); 
if(celsius>=37){ 
digitalWrite(BUZZER,HIGH); 
digitalWrite(RELAY,LOW); 
lcd.setCursor(0,1); 
lcd.print("EMERGENCY CL ON"); 
call(); 
while(celsius>=37){ 
Temp();
 
VoltageSensor_1(); 
digitalWrite(FAN,HIGH);digitalWrite(RELAY,LOW);} 
digitalWrite(FAN,LOW); 
digitalWrite(RELAY,HIGH); 
} 
if((celsius>=33)&&(celsius<=36)){ 
Serial.println("loop"); 
lcd.setCursor(0,1); 
lcd.print("WARNING LIMIT"); 
delay(300); 
Temp(); 
SMS();  
while((celsius>=33)&&(celsius<=34)){ 
Serial.println("loop1"); 
digitalWrite(BUZZER,HIGH); 
Temp();} 
} 
String sendData = "GET /update?api_key="+ myAPI +"&"+ myFIELD_1  +"="+String(celsius); 
espData("AT+CIPMUX=1", 1000, DEBUG); //Allow multiple connections espData("AT+CIPSTART=0,\"TCP\",\""+ myHOST +"\","+ myPORT, 1000, DEBUG); espData("AT+CIPSEND=0," +String(sendData.length()+4),1000,DEBUG);  espSerial.find(">");  
espSerial.println(sendData); 
Serial.println(sendData); 
espData("AT+CIPCLOSE=0",1000,DEBUG); 
} 
void Temp() 
{ 
rawvoltage= analogRead(outputpin);
 
 millivolts= (rawvoltage/1024.0) * 5000; 
 fahrenheit= millivolts/10; 
 celsius= (fahrenheit - 32) * 0.556; 
 lcd.setCursor(0,0); 
 lcd.print("T="); 
 lcd.setCursor(2,0); 
 lcd.print(celsius);  
 delay(200);  
 } 
 void VoltageSensor_1(){ 
 value_1 = analogRead(A1); 
 float a=value_1*5.0; 
 float VOut_1=a/1024.0; 
 Vin_1 = VOut_1 / (R2/(R1+R2));  
 lcd.setCursor(8,0); 
 lcd.print("V:"); 
 lcd.setCursor(10,0); 
 lcd.print(Vin_1); 
 delay(500);} 
 void SMS(){ 
 Serial.println("AT+CMGF=1"); 
 delay(1000);  
 Serial.println("AT+CMGS=\"+919080204240\"\r");  
 delay(1000); 
 Serial.print("YOUR BATTERY IS WARNING LIMIT"); 
 delay(100); 
 Serial.println((char)26); 
 delay(1000);}

void call(){ 
Serial.println("ATD+919080204240;"); 
delay(1000);} 
String espData(String command, const int timeout, boolean debug){ 
Serial.print("AT Command ==> "); 
Serial.print(command); 
Serial.println(" "); 
String response = ""; 
espSerial.println(command); 
long int time = millis(); 
while ( (time + timeout) > millis()){ 
while (espSerial.available()){ 
char c = espSerial.read(); 
response += c; 
}} 
if (debug){ 
//Serial.print(response); 
} 
return response; 
}
